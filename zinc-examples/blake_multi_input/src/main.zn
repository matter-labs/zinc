//!
//! The 'blake_multi_input' main module.
//!

use std::crypto::blake2s;
use std::crypto::blake2s_multi_input;
use std::convert::to_bits;
use std::array::pad;

const BLAKE2S_HASH_SIZE: u64 = 256;
const INT32_BITS:u8 = 32; 
const DIGEST_BYTES:u8 = 32;
const BYTE_SIZE:u8 = 8; 

fn main(preimage1: u32, preimage2:u32) -> bool {
    
    let preimage_bits_1: [bool; INT32_BITS] = to_bits(preimage1);
    let preimage_bits_2: [bool; INT32_BITS] = to_bits(preimage2);
    
    //multi input digest
    let digest_bits_multi_input = blake2s_multi_input(preimage_bits_1, preimage_bits_2);

    let mut digest_bytes_multi_input = [0; DIGEST_BYTES]; 
    for i in 0..DIGEST_BYTES {
        let mut bits = [false; BYTE_SIZE];
        for j in 0..BYTE_SIZE {
            bits[j] = digest_bits_multi_input[BYTE_SIZE * i + j]; 
        }
        digest_bytes_multi_input[i] = std::convert::from_bits_unsigned(bits); 
    }
    //Digest bytes
    dbg!("Digest bytes multi input: {}", digest_bytes_multi_input);

    let mut preimage_bits_concatenated : [bool; 2 * INT32_BITS] = [false; 2 * INT32_BITS];
    preimage_bits_concatenated[0..INT32_BITS] = preimage_bits_1;
    preimage_bits_concatenated[INT32_BITS..(2* INT32_BITS)] = preimage_bits_2; 

    //Concatenated digest
    let digest_bits_concatenated = blake2s(preimage_bits_concatenated);

    let mut digest_bytes_concatenated= [0; DIGEST_BYTES]; 
    for i in 0..DIGEST_BYTES {
        let mut bits = [false; BYTE_SIZE];
        for j in 0..BYTE_SIZE {
            bits[j] = digest_bits_concatenated[BYTE_SIZE * i + j]; 
        }
        digest_bytes_concatenated[i] = std::convert::from_bits_unsigned(bits); 
    }
    //Digest bytes
    dbg!("Digest bytes concatenated: {}", digest_bytes_concatenated);

    //check
    let mut isEqual = true; 
     for i in 0..DIGEST_BYTES {
        if(digest_bytes_multi_input[i] != digest_bytes_concatenated[i]){
            isEqual = false; 
        }
    }

    isEqual
}
